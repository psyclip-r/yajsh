var KrasotaJSSerializer = require('krasota').KrasotaJSSerializer;

ometa YetAnotherJSHighlighter <: KrasotaJSSerializer {
    spaces = :s -> s.replace('\n', '<br/>'),

    comment = :c -> w('comment',
        c.replace(/^\/\/|^\/\*|\*\/$/g, '<span class="punctuation">$&</span>')),

    name = :n -> w('name', n),

    keyword = 'this':k -> keyword('this', k)
        | 'null':k -> keyword('null', k)
        | :k -> keyword(k),

    bool = :b -> w('bool', b),

    number = ('Infinity' | 'NaN'):s -> w('num', s)
        | :n -> w('num', n.replace(/\D/g, function(c) { return punctuation(c).join('') })),

    escapeChar = :c :u -> w('esc', punctuation('\\'), c),
    string = :q [(char | t:ec)*:c] -> w('str',
        punctuation(q),
        c,
        punctuation(q)),

    commaList = t:x (t:xx -> [punctuation(','), xx])*:xs -> [x, xs],

    op = t:s1 :o t:s2 -> [s1, w('op', o), s2],
    binop = t:e1 t:o t:e2 -> w('binop', e1, o, e2),
    unop = t:o t:e -> w('unop', o, e),
    postop = t:e t:s :o -> w('postop', e, s, w('op', o)),

    getExprSB = t:e t:s1 t:s2 t:i t:s3 -> [
        e,
        s1,
        w('get-sb',
            punctuation('['),
            s2,
            i,
            s3,
            punctuation(']')
        )],
    getExprDot = t:e t:s1 t:s2 t:n -> [e, s1, w('get-dot', punctuation('.')), s2, n],

    callExpr = t:e t:s1 t:as -> [
        e,
        s1,
        w('call',
            punctuation('('),
            as,
            punctuation(')')
        )],

    arg = t:s1 t:e t:s2 -> [s1, e, s2],

    newExpr = (t:s1 t:e t:s2 t:as -> ({ s1: s1, e: e, s2: s2, as: as })
        | t:s1 t:e -> ({ s1: s1, e: e }) ):n -> w('new',
            keyword('new'),
            n.s1,
            n.e,
            n.s2 || '',
            n.as?
                w('new-call',
                        punctuation('('),
                        n.as,
                        punctuation(')')
                    ) :
                ''
            ),

    //condExpr = t:e1 t:o1 t:e2 t:o2 t:e3 -> [e1, o1, e2, o2, e3],

    bracketedExpr = t:s1 t:e t:s2 -> [punctuation('('), s1, e, s2, punctuation(')')],

    funcExpr = t:s1 t:n t:s2 funcRest:c -> w('func func-expr',
            keyword('function'), s1, n, s2, c)
        | t:s1 funcRest:c -> w('func func-expr',
            keyword('function'), s1, c),

    funcRest = t:as t:s t:c -> [
        punctuation('('),
        as,
        punctuation(')'),
        s,
        c
    ],
    funcArg = t:s1 t:n t:s2 -> [s1, w('arg', n), s2],

    arr = t:c -> w('arr',
        punctuation('['),
        c,
        punctuation(']')
    ),
    arrItem = t:s1 t:e t:s2 -> [s1, e, s2],

    obj = t:c -> w('obj',
        punctuation('{'),
        c,
        punctuation('}')
    ),
    objItem = t:s1 t:n t:s2 t:s3 t:v t:s4 -> [
        s1, n, s2,
        punctuation(':'),
        s3, v, s4
    ],

    re = t:c :f -> w('re',
        c,
        punctuation(f.join(''))
    ),



    stmtWithExprAndStmt :k = t:s1 t:be t:s2 t:c -> [keyword(k), s1, be, s2, c],
    stmtWithLabel :k = t:s t:l -> [keyword(k), s, l]
        | empty -> keyword(k),

    blockStmt = t:c -> [
        punctuation('{'),
        c,
        punctuation('}')
    ],

    stmts = t*:c -> w('stmts', c.map(function(stmt) {
        return w('stmt', stmt);
    })),

    stmtEnd = t:s ';':c -> [s, punctuation(c)]
        | t:s '\n':c -> [s, '<br/>']
        | t:s
        | empty -> '',

    funcStmt = t:s1 t:n t:s2 funcRest:c -> w('func func-stmt',
        keyword('function'),
        s1,
        n,
        s2,
        c),

    varStmt = [t+:c] -> w('var',
        keyword('var'),
        c.map(function(v, i) {
            return i == c.length - 1 ? v : [v, punctuation(',')]
        })),
    varItemAsgn = t:n t:s1 t:s2 t:e t:s3 -> [n, s1, punctuation('='), s2, e, s3],
    varItemName = t:s1 t:n t:s2 -> [s1, n, s2],

    ifStmt = stmtWithExprAndStmt(#if):i
            t:se t:s1 t:s2 t:e -> w('if', i, se, s1, keyword('else'), s2, e)
        | stmtWithExprAndStmt(#if):i -> w('if', i),

    whileStmt = stmtWithExprAndStmt('while'):c -> w('while', c),
    doStmt = t:s1 t:c t:s2 t:s3 t:be ->
        w('do', keyword('do'), s1, c, s2, keyword('while'), s3, be),

    forStmt = t:s1 forStmtExprs:e t:s2 t:c -> w('for', keyword('for'), s1, e, s2, c),
    forStmtExprs = [t:e1 t:e2 t:e3] -> [
        punctuation('('),
        e1,
        punctuation(';'),
        e2,
        punctuation(';'),
        e3,
        punctuation(')')],
    forStmtExpr = t:s1 t:c t:s2 -> [s1, c, s2]
        | t:s,

    forInStmt = t:s1 forInStmtExpr:e t:s2 t:c -> w('for', keyword('for'), s1, e, s2, c),
    forInStmtExpr = [t:s1 t:e1 t:s2 t:s3 t:e2 t:s4] -> [
        punctuation('('),
        s1,
        e1,
        s2,
        keyword('in'),
        s3,
        e2,
        s4,
        punctuation(')')],
    forInStmtVar = t:c -> [keyword('var'), c],

    breakStmt = stmtWithLabel(#break):b -> w('break', b),
    continueStmt = stmtWithLabel(#continue):c -> w('continue', c),

    switchStmt = t:s1 t:be t:s2 t:c -> w('switch', keyword('switch'), s1, be, s2, c),
    switchStmtContent = [t*:c] -> [punctuation('{'), c, punctuation('}')],
    switchStmtItem = t:s1 t:l t:s2 t:s3 t:c -> [s1, l, s2, punctuation(':'), s3, c],

    switchStmtCase = t:s t:e -> [keyword('case'), s, e],
    switchStmtDefault = t:s -> [keyword('default'), s],

    throwStmt = t:s1 t:e t:s2 -> w('throw', keyword('throw'), s1, e, s2),
    tryStmt = t:s1 t:b t:s2 t:c t:s3 t:f t:s4 -> w('try', keyword('try'), s1, b, s2, c, s3, f, s4)
        | t:s1 t:b t:s2 t:c -> w('try', keyword('try'), s1, b, s2, c),
    tryStmtCatch = t:s1 t:be t:s2 t:c -> [keyword('catch'), s1, be, s2, c],
    tryStmtFinally = t:s1 t:c -> [keyword('finally'), s1, c],

    returnStmt = t:s1 t:c t:s2 -> w('return', keyword('return'), s1, c, s2)
        | t:s2 -> w('return', keyword('return'), s2),

    withStmt = stmtWithExprAndStmt(#with):c -> w('with', c),

    labelStmt = t:l t:s1 t:s2 t:c -> w('label', l, s1, punctuation(':'), s2, c),

    exprStmt = t:e -> w('expr-stmt', e),

    t = [:t apply(t):r] -> r,

    emptyStmt -> punctuation(';'),


    topLevel = ^topLevel:c -> '<pre class="yajsh">' + c + '</pre>'
}

var slice = Array.prototype.slice;

function w(cls, content) {
    return ['<span class="', cls, '">', slice.call(arguments, 1), '</span>'];
}

function punctuation(content) {
    return w('punctuation', content);
}

function keyword(cls, content) {
    if(arguments.length === 1) {
        content = cls;
        cls = '';
    }
    return w('keyword' + (cls ? ' ' + cls : ''), content);
}
