var KrasotaJSSerializer = require('krasota').KrasotaJSSerializer;

ometa YetAnotherJSHighlighter <: KrasotaJSSerializer {
    spaces = :s -> s.replace('\n', '<br/>'),

    comment = :c -> w('comment',
        c.replace(/^\/\/|^\/\*|\*\/$/g, '<span class="punctuation">$&</span>')),

    commaList = t:x (t:xx -> [w('punctuation', ','), xx])*:xs -> [x, xs],

    funcRest = t:as t:s t:c -> [
        w('punctuation', '('),
        as,
        w('punctuation', ')'),
        s,
        c
    ],
    funcArg = t:s1 t:n t:s2 -> [s1, w('arg name', n), s2],

    blockStmt = t:c -> [
        w('punctuation', '{'),
        c,
        w('punctuation', '}')
    ],

    stmts = t*:c -> w('stmts', c.map(function(stmt) {
        return w('stmt', stmt);
    })),

    funcStmt = t:s1 t:n t:s2 funcRest:c -> w('function',
        w('keyword', 'function'),
        s1,
        w('name', n),
        s2,
        c),

    varStmt = [t+:c] -> w('var',
        w('keyword', 'var'),
        c.map(function(v, i) {
            return i == c.length - 1 ? v : [v, w('punctuation', ',')]
        })),
    varItemAsgn = t:n t:s1 t:s2 t:e t:s3 -> [w('name', n), s1, w('punctuation', '='), s2, e, s3],
    varItemName = t:s1 t:n t:s2 -> [s1, w('name', n), s2],

    topLevel = ^topLevel:c -> '<style>' +
            require('stylus').render(
                require('fs').readFileSync('./lib/html.styl', 'utf-8')) +
        '</style>' +
        '<pre class="yajsh">' + c + '</pre>'
}

var slice = Array.prototype.slice;
function w(cls, content) {
    return ['<span class="', cls, '">', slice.call(arguments, 1), '</span>'];
}
